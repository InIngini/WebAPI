<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAPI</name>
    </assembly>
    <members>
        <member name="T:WebAPI.Auth.AuthController">
            <summary>
            Контроллер для управления аутентификацией в сваггере
            </summary>
        </member>
        <member name="T:WebAPI.Controllers.BookController">
            <summary>
            Контроллер для управления книгами.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.BookController.#ctor(WebAPI.BLL.Interfaces.IBookService,WebAPI.BLL.Token.ITokenValidator)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.BookController"/>.
            </summary>
            <param name="bookService">Сервис для работы с книгами.</param>
            <param name="tokenValidator">Сервис для валидации токенов.</param>
        </member>
        <member name="M:WebAPI.Controllers.BookController.CreateBook(WebAPI.BLL.DTO.UserBookData)">
            <summary>
            Создает новую книгу.
            </summary>
            <remarks>
            Пример для использования: 
            
                {
                     "UserId": "1",
                     "NameBook": "Моя новая книга"
                }
                
            </remarks>
            <param name="bookdata">Данные о книге, которые необходимо создать.</param>
            <returns>Результат создания книги.</returns>
        </member>
        <member name="M:WebAPI.Controllers.BookController.UpdateBook(System.Int32,WebAPI.DB.Entities.Book,System.Threading.CancellationToken)">
            <summary>
            Обновляет существующую книгу.
            </summary>
            <remarks>
            Пример для использования: 
            
                {
                     "NameBook": "Измененное название книги"
                }
                
            </remarks>
            <param name="id">Идентификатор книги для обновления.</param>
            <param name="book">Новые данные о книге.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Результат выполнения операции обновления.</returns>
        </member>
        <member name="M:WebAPI.Controllers.BookController.DeleteBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Удаляет книгу по идентификатору.
            </summary>
            <param name="id">Идентификатор книги для удаления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Результат выполнения операции удаления.</returns>
        </member>
        <member name="M:WebAPI.Controllers.BookController.GetBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает книгу по идентификатору.
            </summary>
            <param name="id">Идентификатор книги.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Книга с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.BookController.GetAllBooksForUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все книги для заданного пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список книг для указанного пользователя.</returns>
        </member>
        <member name="T:WebAPI.Controllers.CharacterController">
            <summary>
            Контроллер для управления персонажами и атрибутами.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.#ctor(WebAPI.BLL.Interfaces.ICharacterService,WebAPI.BLL.Interfaces.IAddedAttributeService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.CharacterController"/>.
            </summary>
            <param name="characterService">Сервис для работы с персонажами.</param>
            <param name="addedAttributeService">Сервис для работы с добавленными атрибутами.</param>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.CreateCharacter(WebAPI.BLL.DTO.BookCharacterData)">
            <summary>
            Создает нового персонажа и его ответов.
            </summary>
            <remarks>
            Пример для использования: 
            
                {
                     "BookId": 1
                }
                
            </remarks>
            <param name="bookCharacterData">Данные о персонаже, который необходимо создать.</param>
            <returns>Результат создания персонажа.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.UpdateCharacter(System.Int32,WebAPI.BLL.DTO.CharacterWithAnswers)">
            <summary>
            Обновляет информацию о существующем персонаже и его ответах.
            </summary>
            <remarks>
            Пример для использования: 
            
                {
                     "Name": "Обновленное имя персонажа",
                     "Answers": [
                         "Обновленный ответ 1",
                         "Обновленный ответ 2",
                         "Обновленный ответ 3",
                         "Обновленный ответ 4",
                         "Обновленный ответ 5",
                         "Обновленный ответ 6",
                         "Обновленный ответ 1",
                         "Обновленный ответ 2",
                         "Обновленный ответ 3",
                         "Обновленный ответ 4",
                         "Обновленный ответ 5",
                         "Обновленный ответ 6",
                         "Обновленный ответ 7",
                         "Обновленный ответ 8",
                         "Обновленный ответ 9",
                         "Обновленный ответ 1",
                         "Обновленный ответ 2",
                         "Обновленный ответ 3",
                         "Обновленный ответ 4",
                         "Обновленный ответ 5",
                         "Обновленный ответ 6",
                         "Обновленный ответ 7",
                         "Обновленный ответ 8",
                         "Обновленный ответ 9",
                         "Обновленный ответ 1",
                         "Обновленный ответ 2",
                         "Обновленный ответ 3",
                         "Обновленный ответ 4",
                         "Обновленный ответ 5"
                     ]
                }
                
            </remarks>
            <param name="id">Идентификатор персонажа для обновления.</param>
            <param name="characterWithAnswers">Новые данные о персонаже с ответами.</param>
            <returns>Результат обновления персонажа.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.DeleteCharacter(System.Int32)">
            <summary>
            Удаляет персонажа по идентификатору.
            </summary>
            <param name="id">Идентификатор персонажа для удаления.</param>
            <returns>Результат удаления персонажа.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.GetCharacter(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает персонажа по его идентификатору.
            </summary>
            <param name="id">Идентификатор персонажа.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Персонаж с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.GetAllCharacters(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает всех персонажей книги.
            </summary>
            <param name="idBook">Идентификатор книги.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список персонажей для указанной книги.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.GetQuestions">
            <summary>
            Получает все вопросы.
            </summary>
            <returns>Список вопросов.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.CreateAddedAttribute(System.Int32,WebAPI.BLL.DTO.AddedAttributeData)">
            <summary>
            Создает новый атрибут для персонажа.
            </summary>
            <remarks>
            Пример для использования: 
            
                {
                    "NumberAnswer": "1",
                    "NameAttribute": "Новое имя"
                }
                
            </remarks>
            <param name="id">Идентификатор персонажа, к которому добавляется атрибут.</param>
            <param name="aa">Данные о добавляемом атрибуте.</param>
            <returns>Результат создания добавленного атрибута.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.UpdateAddedAttribute(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Изменяет существующий добавленный атрибут.
            </summary>
            <param name="ida">Идентификатор добавленного атрибута для обновления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <param name="content">Обновленное содержимое атрибута.</param>
            <returns>Результат обновления добавленного атрибута.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.DeleteAddedAttribute(System.Int32,System.Int32)">
            <summary>
            Удаляет добавленный атрибут по его идентификатору.
            </summary>
            <param name="idc">Идентификатор персонажа, к которому относится атрибут.</param>
            <param name="ida">Идентификатор добавленного атрибута для удаления.</param>
            <returns>Результат выполнения операции удаления.</returns>
        </member>
        <member name="M:WebAPI.Controllers.CharacterController.GetAddedAttribute(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает добавленный атрибут по его идентификатору.
            </summary>
            <param name="id">Идентификатор добавленного атрибута.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Добавленный атрибут с указанным идентификатором.</returns>
        </member>
        <member name="T:WebAPI.Controllers.ConnectionController">
            <summary>
            Контроллер для управления связями между персонажами.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.ConnectionController.#ctor(WebAPI.BLL.Interfaces.IConnectionService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.ConnectionController"/>.
            </summary>
            <param name="connectionService">Сервис для работы со связями.</param>
        </member>
        <member name="M:WebAPI.Controllers.ConnectionController.CreateConnection(WebAPI.BLL.DTO.ConnectionData)">
             <summary>
             Создает новую связь.
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                     "BookId": "1",
                     "Character1Id": "1",
                     "Character2Id": "2",
                     "TypeConnection": "Сиблинг"
                 }
            
             </remarks>
             <param name="connectionData">Данные о связи, которую необходимо создать.</param>
             <returns>Результат создания связи.</returns>
        </member>
        <member name="M:WebAPI.Controllers.ConnectionController.DeleteConnection(System.Int32)">
            <summary>
            Удаляет связь по идентификатору.
            </summary>
            <param name="id">Идентификатор связь для удаления.</param>
            <returns>Результат удаления связи.</returns>
        </member>
        <member name="M:WebAPI.Controllers.ConnectionController.GetConnection(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает связь по его идентификатору.
            </summary>
            <param name="id">Идентификатор связи.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Связь с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.ConnectionController.GetAllConnection(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все связи схемы по идентификатору схемы.
            </summary>
            <param name="id">Идентификатор схемы.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список всех связей для указанной схемы.</returns>
        </member>
        <member name="T:WebAPI.Controllers.EventController">
            <summary>
            Контроллер для управления событиями на временной шкале.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.EventController.#ctor(WebAPI.BLL.Interfaces.IEventService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.EventController"/>.
            </summary>
            <param name="eventService">Сервис для работы с событиями.</param>
        </member>
        <member name="M:WebAPI.Controllers.EventController.CreateEvent(WebAPI.BLL.DTO.EventData)">
             <summary>
             Создает новое событие.
             </summary>
             <remarks>
             Пример для использования: 
            
                 {
                     "BookId": "1",
                     "Name": "Новое имя",
                     "Content": "Какой-то контент",
                     "Time": "10.06.2024-20.06.2024",
                     "CharactersId": [1,2]
                 }
            
             </remarks>
             <param name="eventData">Данные о событии, которое необходимо создать.</param>
             <returns>Результат создания события.</returns>
        </member>
        <member name="M:WebAPI.Controllers.EventController.UpdateEvent(System.Int32,WebAPI.BLL.DTO.EventData,System.Threading.CancellationToken)">
             <summary>
             Обновляет существующее событие.
             </summary>
             <remarks>
             Пример для использования: 
            
                 {
                     "Name": "Новое имя",
                     "Content": "Какой-то",
                     "Time": "10.06.2024-20.06.2024",
                     "CharactersId": [1]
                 }
            
             </remarks>
             <param name="id">Идентификатор события для обновления.</param>
             <param name="eventData">Обновленные данные о событии.</param>
             <param name="cancellationToken">Токен для отмены запроса.</param>
             <returns>Результат обновления события.</returns>
        </member>
        <member name="M:WebAPI.Controllers.EventController.DeleteEvent(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Удаляет событие по идентификатору.
            </summary>
            <param name="id">Идентификатор события для удаления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Результат удаления события.</returns>
        </member>
        <member name="M:WebAPI.Controllers.EventController.GetEvent(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает событие по его идентификатору.
            </summary>
            <param name="id">Идентификатор события.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Событие с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.EventController.GetAllEvents(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все события таймлайна по идентификатору таймлайна.
            </summary>
            <param name="id">Идентификатор таймлайна, по которому ищутся все события.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список всех событий для указанного идентификатора таймлайна.</returns>
        </member>
        <member name="T:WebAPI.Controllers.GalleryController">
            <summary>
            Контроллер для управления изображениями в галерее персонажей.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.GalleryController.#ctor(WebAPI.BLL.Interfaces.IGalleryService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.GalleryController"/>.
            </summary>
            <param name="galleryService">Сервис для работы с галереями.</param>
        </member>
        <member name="M:WebAPI.Controllers.GalleryController.CreateGallery(WebAPI.BLL.DTO.GalleryData)">
             <summary>
             Создает новую галерею (то есть добавляет изображение к персонажу).
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                     "CharacterId": "1",
                     "PictureId": "1"
                 }
            
             </remarks>
             <param name="galleryData">Данные о галерее, которую необходимо создать.</param>
             <returns>Результат создания галереи.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GalleryController.DeletePictureFromGallery(System.Int32)">
            <summary>
            Удаляет изображение из галереи.
            </summary>
            <param name="idPicture">Идентификатор изображения для удаления.</param>
            <returns>Результат удаления изображения.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GalleryController.GetGallery(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает галерею (формально одно изображение) по её идентификатору.
            </summary>
            <param name="id">Идентификатор галереи.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Галерея с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GalleryController.GetAllGallery(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все галереи (формально все изображения) по заданному идентификатору персонажа.
            </summary>
            <param name="id">Идентификатор персонажа, по которому ищутся все галереи.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список всех галерей для указанного идентификатора персонажа.</returns>
        </member>
        <member name="T:WebAPI.Controllers.PictureController">
            <summary>
            Контроллер для управления изображениями.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.PictureController.#ctor(WebAPI.BLL.Interfaces.IPictureService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.PictureController"/>.
            </summary>
            <param name="pictureService">Сервис для работы с изображениями.</param>
        </member>
        <member name="M:WebAPI.Controllers.PictureController.CreatePicture(WebAPI.DB.Entities.Picture)">
            <summary>
            Создает новое изображение.
            </summary>
            <param name="picture">Данные о изображении, которое необходимо создать.</param>
            <returns>Результат создания изображения.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PictureController.DeletePicture(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Удаляет изображение по его идентификатору.
            </summary>
            <param name="id">Идентификатор изображения для удаления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Результат удаления изображения.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PictureController.GetPicture(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает изображение по его идентификатору.
            </summary>
            <param name="id">Идентификатор изображения.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Изображение с указанным идентификатором.</returns>
        </member>
        <member name="T:WebAPI.Controllers.SchemeController">
            <summary>
            Контроллер для управления схемами.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.#ctor(WebAPI.BLL.Interfaces.ISchemeService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.SchemeController"/>.
            </summary>
            <param name="schemeService">Сервис для работы с схемами.</param>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.CreateScheme(WebAPI.BLL.DTO.SchemeData)">
             <summary>
             Создает новую схему.
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                     "BookId": "1",
                     "NameScheme": "Новое имя"
                 }
            
             </remarks>
             <param name="schemedata">Данные о схеме, которую необходимо создать.</param>
             <returns>Результат создания схемы.</returns>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.UpdateScheme(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Обновляет схему, добавляя связи.
            </summary>
            <param name="id">Идентификатор схемы.</param>
            <param name="idConnection">Идентификатор связи для добавления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Обновлённая схема.</returns>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.DeleteScheme(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Удаляет схему по её идентификатору.
            </summary>
            <param name="id">Идентификатор схемы для удаления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Результат удаления схемы.</returns>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.GetScheme(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает схему по её идентификатору.
            </summary>
            <param name="id">Идентификатор схемы.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Схема с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.SchemeController.GetAllScheme(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все схемы по заданному идентификатору книги.
            </summary>
            <param name="id">Идентификатор для получения всех схем книги.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список всех схем для указанного идентификатора книги.</returns>
        </member>
        <member name="T:WebAPI.Controllers.TimelineController">
            <summary>
            Контроллер для управления таймлайнами.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.#ctor(WebAPI.BLL.Interfaces.ITimelineService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.TimelineController"/>.
            </summary>
            <param name="timelineService">Сервис для работы с таймлайнами.</param>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.CreateTimeline(WebAPI.BLL.DTO.TimelineData)">
             <summary>
             Создает новый таймлайн.
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                     "BookId": "1",
                     "NameTimeline": "Новое имя"
                 }
            
             </remarks>
             <param name="timelinedata">Данные о таймлайне, который необходимо создать.</param>
             <returns>Результат создания таймлайна.</returns>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.UpdateTimeline(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Обновляет таймлайн, добавляя событие.
            </summary>
            <param name="id">Идентификатор таймлайна.</param>
            <param name="idEvent">Идентификатор события для добавления.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Обновлённый таймлайн.</returns>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.DeleteTimeline(System.Int32)">
            <summary>
            Удаляет таймлайн по его идентификатору.
            </summary>
            <param name="id">Идентификатор таймлайна для удаления.</param>
            <returns>Результат удаления таймлайна.</returns>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.GetTimeline(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает таймлайн по его идентификатору.
            </summary>
            <param name="id">Идентификатор таймлайна.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Таймлайн с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Controllers.TimelineController.GetAllTimeline(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает все таймлайны по заданному идентификатору книги.
            </summary>
            <param name="id">Идентификатор книги для получения всех таймлайнов.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Список всех таймлайнов для указанного идентификатора книги.</returns>
        </member>
        <member name="T:WebAPI.Controllers.UserController">
            <summary>
            Контроллер для управления пользователями.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.UserController.#ctor(WebAPI.BLL.Interfaces.IUserService)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:WebAPI.Controllers.UserController"/>.
            </summary>
            <param name="userService">Сервис для работы с пользователями.</param>
        </member>
        <member name="M:WebAPI.Controllers.UserController.CreateUser(WebAPI.BLL.DTO.LoginData)">
             <summary>
             Регистрирует нового пользователя.
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                   "login": "username2",
                   "password": "password"
                 }
            
             </remarks>
             <param name="loginData">Данные для регистрации пользователя.</param>
             <returns>Результат создания пользователя.</returns>
        </member>
        <member name="M:WebAPI.Controllers.UserController.Login(WebAPI.BLL.DTO.LoginData,System.Threading.CancellationToken)">
             <summary>
             Авторизирует пользователя.
             </summary>
             <remarks>
             Пример для использования: 
             
                 {
                   "login": "username",
                   "password": "password"
                 }
            
             </remarks>
             <param name="loginData">Данные для авторизации пользователя.</param>
             <param name="cancellationToken">Токен для отмены запроса.</param>
             <returns>Токен пользователя, полученный в результате авторизации.</returns>
        </member>
        <member name="M:WebAPI.Controllers.UserController.GetUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Получает информацию о пользователе по его идентификатору.
            </summary>
            <param name="id">Идентификатор пользователя.</param>
            <param name="cancellationToken">Токен для отмены запроса.</param>
            <returns>Информация о пользователе с указанным идентификатором.</returns>
        </member>
        <member name="M:WebAPI.Program.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Конфигурирует сервисы приложения и регистрирует зависимые сервисы.
            </summary>
            <param name="services">Сборка сервисов для добавления зависимостей.</param>
            <param name="configuration">Конфигурация приложения для доступа к настройкам.</param>
        </member>
        <member name="M:WebAPI.Program.ConfigureAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Конфигурирует AutoMapper и регистрирует профили в контейнере сервисов.
            </summary>
            <param name="services">Сборка сервисов для добавления профилей AutoMapper.</param>
        </member>
        <member name="M:WebAPI.Program.RegisterApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрирует сервисы приложения в контейнере зависимостей.
            </summary>
            <param name="services">Сборка сервисов для добавления зависимостей.</param>
        </member>
        <member name="M:WebAPI.Program.ApplyMigrations(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Применяет все ожидающие миграции базы данных
            </summary>
        </member>
        <member name="M:WebAPI.Program.InitializeData(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Инициализирует данные в базе данных при старте приложения, если таких данных еще нет.
            </summary>
            <param name="app">Экземпляр приложения для создания области видимости сервисов.</param>
        </member>
        <member name="M:WebAPI.Program.ConfigureMiddleware(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Настраивает промежуточное программное обеспечение (middleware) для обработки запросов и ошибок.
            </summary>
            <param name="app">Экземпляр приложения для настройки middleware.</param>
        </member>
    </members>
</doc>
