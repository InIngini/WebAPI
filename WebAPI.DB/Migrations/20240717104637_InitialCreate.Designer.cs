// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.DB;

#nullable disable

namespace WebAPI.DB.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240717104637_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.DB.Entities.AddedAttribute", b =>
                {
                    b.Property<int>("IdAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttribute"));

                    b.Property<string>("ContentAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCharacter")
                        .HasColumnType("int");

                    b.Property<string>("NnameAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberAnswer")
                        .HasColumnType("int");

                    b.HasKey("IdAttribute");

                    b.HasIndex("IdCharacter");

                    b.ToTable("AddedAttributes");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Answer", b =>
                {
                    b.Property<int>("IdCharacter")
                        .HasColumnType("int");

                    b.Property<string>("Answer10Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1ByHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2ByHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3ByHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4ByHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5ByHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer6Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer6Personality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer6Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer7Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer7Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer8Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer8Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer9Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer9Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCharacter");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToBook", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("TypeBelong")
                        .HasColumnType("int");

                    b.HasKey("IdUser", "IdBook");

                    b.HasIndex("IdBook");

                    b.ToTable("BelongToBooks");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToEvent", b =>
                {
                    b.Property<int>("IdCharacter")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.HasKey("IdCharacter", "IdEvent");

                    b.HasIndex("IdEvent");

                    b.ToTable("BelongToEvents");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToScheme", b =>
                {
                    b.Property<int>("IdScheme")
                        .HasColumnType("int");

                    b.Property<int>("IdConnection")
                        .HasColumnType("int");

                    b.HasKey("IdScheme", "IdConnection");

                    b.HasIndex("IdConnection");

                    b.ToTable("BelongToSchemes");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToTimeline", b =>
                {
                    b.Property<int>("IdTimeline")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.HasKey("IdTimeline", "IdEvent");

                    b.HasIndex("IdEvent");

                    b.ToTable("BelongToTimelines");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"));

                    b.Property<int?>("IdPicture")
                        .HasColumnType("int");

                    b.Property<string>("nameBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBook");

                    b.HasIndex("IdPicture");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Character", b =>
                {
                    b.Property<int>("IdCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCharacter"));

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int?>("IdPicture")
                        .HasColumnType("int");

                    b.HasKey("IdCharacter");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdPicture");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Connection", b =>
                {
                    b.Property<int>("IdConnection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConnection"));

                    b.Property<int>("IdCharacter1")
                        .HasColumnType("int");

                    b.Property<int>("IdCharacter2")
                        .HasColumnType("int");

                    b.Property<int>("TypeConnection")
                        .HasColumnType("int");

                    b.HasKey("IdConnection");

                    b.HasIndex("IdCharacter1");

                    b.HasIndex("IdCharacter2");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvent"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvent");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Gallery", b =>
                {
                    b.Property<int?>("IdPicture")
                        .HasColumnType("int");

                    b.Property<int>("IdCharacter")
                        .HasColumnType("int");

                    b.HasKey("IdPicture");

                    b.HasIndex("IdCharacter");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Picture", b =>
                {
                    b.Property<int>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPicture"));

                    b.Property<byte[]>("Picture1")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdPicture");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Scheme", b =>
                {
                    b.Property<int>("IdScheme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdScheme"));

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<string>("NameScheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdScheme");

                    b.HasIndex("IdBook");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Timeline", b =>
                {
                    b.Property<int>("IdTimeline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTimeline"));

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<string>("NameTimeline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTimeline");

                    b.HasIndex("IdBook");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.NumberBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NumberBlocks");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Block");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.TypeBelongToBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeBelongToBooks");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.TypeConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeConnections");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.AddedAttribute", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("IdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Answer", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("IdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToBook", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToEvent", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("IdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToScheme", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("IdConnection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Scheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("IdScheme")
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.BelongToTimeline", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Timeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("IdTimeline")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Book", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Character", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture");

                    b.Navigation("Book");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Connection", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Character", "Character1")
                        .WithMany()
                        .HasForeignKey("IdCharacter1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Character", "Character2")
                        .WithMany()
                        .HasForeignKey("IdCharacter2")
                        .IsRequired();

                    b.Navigation("Character1");

                    b.Navigation("Character2");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Gallery", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("IdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DB.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Scheme", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebAPI.DB.Entities.Timeline", b =>
                {
                    b.HasOne("WebAPI.DB.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebAPI.DB.Guide.Question", b =>
                {
                    b.HasOne("WebAPI.DB.Guide.NumberBlock", "NumberBlock")
                        .WithMany()
                        .HasForeignKey("Block")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumberBlock");
                });
#pragma warning restore 612, 618
        }
    }
}
